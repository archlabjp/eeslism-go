/* ==================================================================

PSYLIB

湿り空気の状態値計算用ライブラリ－
（宇田川、パソコンによる空気調和計算法、プログラム3.1の C 言語版, ANSI C 版）

--------------------------------------------------------------------- */

package eeslism

import (
	"fmt"
	"math"
)

var _R0, _Ca, _Cv, _Rc, _Cc, _Cw, _Pcnv, _P float64 = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0

/*
Psyint (Psychrometric Initialization)

この関数は、湿り空気の状態値計算に必要な物理定数を初期化します。
これらの定数は、空気の温度、湿度、エンタルピーなどの関係を定義するために用いられます。

建築環境工学的な観点:
- **湿り空気の状態値計算の基礎**: 湿り空気の状態値（乾球温度、湿球温度、露点温度、絶対湿度、相対湿度、エンタルピーなど）は、
  空調システムの設計、熱負荷計算、室内快適性評価に不可欠です。
  この関数は、これらの状態値を計算するための基礎となる物理定数を設定します。
  - `_P`: 標準大気圧 [kPa] または [mmHg]。
  - `_R0`: 0℃の水の蒸発潜熱 [J/kg] または [kcal/kg]。
  - `_Ca`: 乾き空気の定圧比熱 [J/(kg・K)] または [kcal/(kg・℃)]。
  - `_Cv`: 水蒸気の定圧比熱 [J/(kg・K)] または [kcal/(kg・℃)]。
  - `_Rc`: 0℃の氷の融解潜熱 [J/kg] または [kcal/kg]。
  - `_Cc`: 氷の比熱 [J/(kg・K)] または [kcal/(kg・℃)]。
  - `_Cw`: 水の比熱 [J/(kg・K)] または [kcal/(kg・℃)]。
  - `_Pcnv`: 圧力単位変換係数。
- **単位系の考慮**: `UNIT`が`SI`（国際単位系）かどうかに応じて値が設定されるのは、
  単位系によって物理定数の値が異なるためです。
  これにより、異なる単位系での計算に対応できます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func Psyint() {
	if UNIT == "SI" {
		_P = 101.325
		_R0 = 2501000.0
		_Ca = 1005.0
		_Cv = 1846.0
		_Rc = 333600.0
		_Cc = 2093.0
		_Cw = 4186.0
		_Pcnv = 1.0
	} else {
		_P = 760.0
		_R0 = 597.5
		_Ca = 0.24
		_Cv = 0.441
		_Rc = 79.7
		_Cc = 0.5
		_Cw = 1.0
		_Pcnv = 7.50062
	}
}

/*
Poset (Set Atmospheric Pressure)

この関数は、湿り空気の状態値計算に使用される大気圧（`_P`）を設定します。

建築環境工学的な観点:
- **大気圧の影響**: 湿り空気の状態値は、
  大気圧によって変化します。
  例えば、標高の高い場所では大気圧が低くなり、
  水の沸点や飽和水蒸気圧が変化します。
  この関数は、特定の場所の標高や気象条件に応じた大気圧を設定することで、
  より正確な湿り空気の状態値計算を可能にします。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための重要な役割を果たします。
*/
func Poset(Po float64) {
	_P = Po
}

/*
FNPo (Function for Atmospheric Pressure)

この関数は、湿り空気の状態値計算に使用される現在の大気圧（`_P`）を返します。

建築環境工学的な観点:
- **大気圧の参照**: 湿り空気の状態値計算において、
  大気圧は重要なパラメータです。
  この関数は、設定された大気圧を他の関数に提供することで、
  湿り空気の状態値計算を正確に行うことを可能にします。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための重要な役割を果たします。
*/
func FNPo() float64 {
	return _P
}

// ---- 露点温度 ----

// 湿り空気を冷却していくと、やがて飽和空気となる。このときの温度を露点温度という。
// 飽和空気にはこれ以上水分を含むことができず、これ以上冷却すると結露が生じる。
// 飽和空気の全圧のうち、水蒸気が占める圧力(水蒸気分圧)である飽和水蒸気圧 Pws [kPa] を求める。
// 計算にはウェククスラー・ハイランド(Wexler-Hyland)による式を用いる。
// See: パソコンによる空気調和計算法 P.27


/*
FNPws (Function for Saturated Water Vapor Pressure)

この関数は、与えられた温度（`T`）における飽和水蒸気圧（`Pws`）を計算します。
飽和水蒸気圧は、湿り空気の状態値計算、特に露点温度や相対湿度の計算に不可欠な要素です。

建築環境工学的な観点:
- **飽和水蒸気圧の重要性**: 湿り空気は、
  その温度に応じて最大で含むことができる水蒸気量が決まっています。
  この最大水蒸気量に対応する水蒸気圧が飽和水蒸気圧です。
  飽和水蒸気圧は、
  - **結露の発生予測**: 表面温度が空気の露点温度（飽和水蒸気圧に対応する温度）を下回ると、
    結露が発生します。
    この関数は、露点温度を計算するための基礎を提供します。
  - **相対湿度の計算**: 相対湿度は、
    空気中の実際の水蒸気圧と飽和水蒸気圧の比率で定義されます。
    この関数は、相対湿度を計算するための基礎を提供します。
- **ウェククスラー・ハイランドによる式**: この関数は、
  ウェククスラー・ハイランド（Wexler-Hyland）による経験式を用いて飽和水蒸気圧を計算します。
  この式は、0℃以上（水と接する場合）と0℃以下（氷と接する場合）で異なる形式を持ち、
  広い温度範囲で正確な飽和水蒸気圧を推定できます。
- **単位変換**: 計算された飽和水蒸気圧は、
  `_Pcnv`を用いて適切な単位に変換されます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNPws(T float64) float64 {

	// 絶対温度 Tabs
	Tabs := T + 273.15
	if math.Abs(Tabs) < 1e-5 {
		fmt.Printf("xxxx ゼロ割が発生しています Tabs=%f\n", Tabs)
	}

	// 飽和水蒸気分圧 Pws
	var Pws float64
	if T > 0.0 {
		// 0から200℃の水と接する場合
		Pws = math.Exp(6.5459673*math.Log(Tabs)-5800.2206/Tabs+1.3914993+Tabs*(-0.048640239+
			Tabs*(4.1764768e-5-1.4452093e-8*Tabs))) / 1000.0
	} else {
		// -100から0℃の氷と接する場合
		Pws = math.Exp(-5674.5359/Tabs+6.3925247+Tabs*(-9.677843e-3+
			Tabs*(6.2215701e-7+Tabs*(2.0747825e-9-9.484024e-13*Tabs)))+4.1635019*math.Log(Tabs)) / 1000.0
	}

	// 単位変換
	return _Pcnv * Pws
}


// 水蒸気分圧 Pw [kPa] から露点温度を求める
// NOTE:
// - 611.2 Paは、水の飽和蒸気圧に関連する値であり、これはおおよそ0℃の飽和蒸気圧に相当します。
//
// See: パソコンによる空気調和計算法 P.28
/*
FNDp (Function for Dew Point Temperature)

この関数は、与えられた水蒸気分圧（`Pw`）から露点温度を計算します。
露点温度は、湿り空気の状態値計算、特に結露の発生予測に不可欠な要素です。

建築環境工学的な観点:
- **露点温度の重要性**: 露点温度は、
  湿り空気を冷却していったときに、
  水蒸気が凝縮して結露が始まる温度です。
  建物の設計や運用において、
  - **結露の発生予測**: 窓や壁の表面温度が露点温度を下回ると、
    結露が発生し、カビの発生や建材の劣化につながる可能性があります。
    この関数は、結露の発生リスクを評価するための基礎を提供します。
  - **除湿制御**: 空調システムにおける除湿運転は、
    空気の露点温度を制御することで行われます。
    この関数は、除湿制御の設計や評価に用いられます。
- **近似式の利用**: この関数は、
  水蒸気分圧から露点温度を求めるための近似式を用いています。
  `Pwx >= 611.2` の条件は、
  0℃以上（水と接する場合）と0℃以下（氷と接する場合）で異なる近似式を適用することを示唆します。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNDp(Pw float64) float64 {
	// 水蒸気分圧の単位をPaに変換
	Pwx := Pw * 1000.0 / _Pcnv

	Y := math.Log(Pwx)

	// 近似式を用いて水蒸気分圧から露点温度を求める
	if Pwx >= 611.2 {
		// 0から50℃のとき
		// NOTE: 611.2[Pa]はおおよそ0℃の飽和蒸気圧である.
		return -77.199 + Y*(13.198+Y*(-0.63772+0.071098*Y))
	} else {
		// -50から0℃のとき
		return -60.662 + Y*(7.4624+Y*(0.20594+0.016321*Y))
	}
}

/*
FNDbxr (Function for Dry Bulb Temperature from Absolute Humidity and Relative Humidity)

この関数は、絶対湿度（`X`）と相対湿度（`Rh`）から乾球温度を計算します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、絶対湿度、相対湿度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している乾球温度を推定します。
- **快適性評価の基礎**: 乾球温度は、
  室内温熱環境の主要な指標の一つであり、
  居住者の快適性に直接影響します。
  この関数は、快適性評価や、空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNDbxr(X, Rh float64) float64 {
	return FNDbrp(Rh, FNPwx(X))
}

/*
FNDbxh (Function for Dry Bulb Temperature from Absolute Humidity and Enthalpy)

この関数は、絶対湿度（`X`）とエンタルピー（`H`）から乾球温度を計算します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、絶対湿度、エンタルピーなど、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している乾球温度を推定します。
- **熱負荷計算の基礎**: エンタルピーは、
  空気の持つ全熱量を示すため、
  熱負荷計算において重要なパラメータです。
  この関数は、熱負荷計算や、空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNDbxh(X, H float64) float64 {
	return (H - _R0*X) / (_Ca + _Cv*X)
}
/*
FNDbxw (Function for Dry Bulb Temperature from Absolute Humidity and Wet Bulb Temperature)

この関数は、絶対湿度（`X`）と湿球温度（`Twb`）から乾球温度を計算します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、絶対湿度、湿球温度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している乾球温度を推定します。
- **湿球温度の重要性**: 湿球温度は、
  空気の冷却能力を示す指標であり、
  特に気化冷却器の性能評価や、
  空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNDbxw(X, Twb float64) float64 {
	Hc := FNHc(Twb)
	return ((_Ca*Twb + (_Cv*Twb+_R0-Hc)*FNXp(FNPws(Twb)) - (_R0-Hc)*X) / (_Ca + _Cv*X))
}

/*
FNDbrh (Function for Dry Bulb Temperature from Relative Humidity and Enthalpy)

この関数は、相対湿度（`Rh`）とエンタルピー（`H`）から乾球温度を計算します。
ニュートン法のような反復計算を用いて、収束するまで乾球温度を推定します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、相対湿度、エンタルピーなど、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している乾球温度を推定します。
- **反復計算の必要性**: 相対湿度とエンタルピーから乾球温度を直接求める解析解は複雑なため、
  数値的な反復計算（ニュートン法など）が用いられます。
  `for I := 1; I <= 10; I++` のループは、
  計算が収束するまで最大10回繰り返すことを示します。
- **快適性評価の基礎**: 乾球温度は、
  室内温熱環境の主要な指標の一つであり、
  居住者の快適性に直接影響します。
  この関数は、快適性評価や、空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNDbrh(Rh, H float64) float64 {
	var T0, F, Fd, Dbrh float64
	T0 = math.Min(FNDbxh(0., H), 30.)
	for I := 1; I <= 10; I++ {
		F = H - FNH(T0, FNXtr(T0, Rh))
		Fd = (H - FNH(T0+.1, FNXtr(T0+.1, Rh)) - F) / .1
		Dbrh = T0 - F/Fd
		if math.Abs(Dbrh-T0) <= .02 {
			return Dbrh
		}
		T0 = Dbrh
	}
	fmt.Printf("XXX FNDbrh  (T-T0)=%f\n", Dbrh-T0)
	return Dbrh
}

/*
FNDbrw (Function for Dry Bulb Temperature from Relative Humidity and Wet Bulb Temperature)

この関数は、相対湿度（`Rh`）と湿球温度（`Twb`）から乾球温度を計算します。
ニュートン法のような反復計算を用いて、収束するまで乾球温度を推定します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、相対湿度、湿球温度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している乾球温度を推定します。
- **反復計算の必要性**: 相対湿度と湿球温度から乾球温度を直接求める解析解は複雑なため、
  数値的な反復計算（ニュートン法など）が用いられます。
  `for I := 1; I <= 10; I++` のループは、
  計算が収束するまで最大10回繰り返すことを示します。
- **湿球温度の重要性**: 湿球温度は、
  空気の冷却能力を示す指標であり、
  特に気化冷却器の性能評価や、
  空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNDbrw(Rh, Twb float64) float64 {
	var T0, F, Fd, Dbrw float64
	T0 = Twb
	for I := 1; I <= 10; I++ {
		F = T0 - FNDbxw(FNXtr(T0, Rh), Twb)
		Fd = (T0 + .1 - FNDbxw(FNXtr(T0+.1, Rh), Twb) - F) / .1
		Dbrw = T0 - F/Fd
		if math.Abs(Dbrw-T0) <= .02 {
			return Dbrw
		}
		T0 = Dbrw
	}
	fmt.Printf("XXX FNDbrw  (T-T0)=%f\n", Dbrw-T0)
	return Dbrw
}

// --- 相対湿度、比較湿度 ---
// 湿り空気の水蒸気分圧 Pw [kPa] から絶対湿度 x [kg/kg]を求める。
// 絶対湿度とは、湿り空気の水蒸気と乾き空気の質量の比である。
// See: パソコンによる空気調和計算法 P.29

/*
FNXp (Function for Absolute Humidity from Water Vapor Pressure)

この関数は、湿り空気の水蒸気分圧（`Pw`）から絶対湿度（`x`）を計算します。
絶対湿度は、湿り空気中の水蒸気の質量と乾き空気の質量の比であり、
潜熱負荷計算や除湿量計算に不可欠な要素です。

建築環境工学的な観点:
- **絶対湿度の重要性**: 絶対湿度は、
  空気中の水蒸気量を直接的に示すため、
  - **潜熱負荷計算**: 除湿や加湿によって変化する潜熱量を計算する際に用いられます。
  - **室内空気質評価**: 室内空気中の水蒸気量を評価し、
    快適性や結露の発生リスクを判断する際に用いられます。
- **水蒸気分圧と絶対湿度の関係**: この関数は、
  水蒸気分圧と絶対湿度の間の物理的な関係式を用いて計算します。
  `0.62198`は、水蒸気の分子量と乾き空気の平均分子量の比です。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNXp(Pw float64) float64 {
	// 標準大気圧 P [kPa]
	P := 101.325

	if math.Abs(P-Pw) < 1.0e-4 {
		fmt.Printf("xxxxx ゼロ割が発生しています P=%f Pw=%f\n", P, Pw)
	}

	// 絶対湿度 x [kg/kg]
	x := 0.62198 * Pw / (P - Pw)

	return x
}

// 温度 T [C] および 相対湿度 Rh [%] から絶対湿度 x [kg/kg] を求める

/*
FNXtr (Function for Absolute Humidity from Temperature and Relative Humidity)

この関数は、温度（`T`）と相対湿度（`Rh`）から絶対湿度（`x`）を計算します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、相対湿度、絶対湿度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している絶対湿度を推定します。
- **潜熱負荷計算の基礎**: 絶対湿度は、
  空気中の水蒸気量を直接的に示すため、
  潜熱負荷計算や除湿量計算に不可欠な要素です。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNXtr(T, Rh float64) float64 {
	return FNXp(FNPwtr(T, Rh))
}

/*
FNXtw (Function for Absolute Humidity from Dry Bulb Temperature and Wet Bulb Temperature)

この関数は、乾球温度（`T`）と湿球温度（`Twb`）から絶対湿度（`X`）を計算します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、湿球温度、絶対湿度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している絶対湿度を推定します。
- **湿球温度の重要性**: 湿球温度は、
  空気の冷却能力を示す指標であり、
  特に気化冷却器の性能評価や、
  空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNXtw(T, Twb float64) float64 {
	Hc := FNHc(Twb)
	return ((_R0+_Cv*Twb-Hc)*FNXp(FNPws(Twb)) - _Ca*(T-Twb)) / (_Cv*T + _R0 - Hc)
}
// 絶対湿度 x [kg/kg] から 水蒸気分圧 Pw [kPa] を求める。
// See: パソコンによる空気調和計算法 P.29

/*
FNPwx (Function for Water Vapor Pressure from Absolute Humidity)

この関数は、絶対湿度（`X`）から湿り空気の水蒸気分圧（`Pw`）を計算します。

建築環境工学的な観点:
- **水蒸気分圧の重要性**: 水蒸気分圧は、
  空気中の水蒸気量を圧力として示すため、
  湿り空気の状態値計算、特に露点温度や相対湿度の計算に不可欠な要素です。
- **絶対湿度と水蒸気分圧の関係**: この関数は、
  絶対湿度と水蒸気分圧の間の物理的な関係式を用いて計算します。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNPwx(X float64) float64 {
	// 標準大気圧 P [kPa]
	P := 101.325

	// 水蒸気分圧 Pw [kPa]
	Pw := (X * P / (X + 0.62198))

	return Pw
}

// 温度 T [C] および 湿り空気の水蒸気分圧 Pw [kPa] から 相対湿度 φ [%] を求める。
// 相対湿度は水蒸気分圧を飽和水蒸気圧の百分率である。
// See: パソコンによる空気調和計算法 P.29

/*
FNRhtp (Function for Relative Humidity from Temperature and Water Vapor Pressure)

この関数は、温度（`T`）と湿り空気の水蒸気分圧（`Pw`）から相対湿度（`φ`）を計算します。
相対湿度は、湿り空気の状態値計算、特に快適性評価や結露の発生予測に不可欠な要素です。

建築環境工学的な観点:
- **相対湿度の重要性**: 相対湿度は、
  空気中の水蒸気量を飽和状態に対する割合で示すため、
  - **快適性評価**: 室内環境の快適性を評価する際に用いられます。
    高すぎる相対湿度は不快感やカビの発生につながり、
    低すぎる相対湿度は乾燥感を引き起こします。
  - **結露の発生予測**: 表面温度が露点温度を下回ると結露が発生しますが、
    相対湿度はそのリスクを評価する上で重要な指標です。
- **水蒸気分圧と飽和水蒸気圧の関係**: 相対湿度は、
  空気中の実際の水蒸気圧と、
  その温度における飽和水蒸気圧の比率で定義されます。
  この関数は、`FNPws`関数を呼び出して飽和水蒸気圧を計算し、
  相対湿度を算出します。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNRhtp(T, Pw float64) float64 {
	return 100.0 * Pw / FNPws(T)
}

// 温度 T [C] および 相対湿度 Rh [%] から 湿り空気の水蒸気分圧 Pw [kPa] を求める。
// See: パソコンによる空気調和計算法 P.29

/*
FNPwtr (Function for Water Vapor Pressure from Temperature and Relative Humidity)

この関数は、温度（`T`）と相対湿度（`Rh`）から湿り空気の水蒸気分圧（`Pw`）を計算します。

建築環境工学的な観点:
- **水蒸気分圧の重要性**: 水蒸気分圧は、
  空気中の水蒸気量を圧力として示すため、
  湿り空気の状態値計算、特に露点温度や絶対湿度の計算に不可欠な要素です。
- **相対湿度と飽和水蒸気圧の関係**: 水蒸気分圧は、
  相対湿度と飽和水蒸気圧を乗じることで計算されます。
  この関数は、`FNPws`関数を呼び出して飽和水蒸気圧を計算し、
  水蒸気分圧を算出します。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNPwtr(T, Rh float64) float64 {
	return (Rh * FNPws(T) / 100.0)
}

/*
FNDbrp (Function for Dry Bulb Temperature from Relative Humidity and Water Vapor Pressure)

この関数は、相対湿度（`Rh`）と水蒸気分圧（`Pw`）から乾球温度を計算します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、相対湿度、水蒸気分圧など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している乾球温度を推定します。
- **快適性評価の基礎**: 乾球温度は、
  室内温熱環境の主要な指標の一つであり、
  居住者の快適性に直接影響します。
  この関数は、快適性評価や、空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNDbrp(Rh, Pw float64) float64 {
	return FNDp(100.0 / Rh * Pw)
}

/*
FNRhtx (Function for Relative Humidity from Temperature and Absolute Humidity)

この関数は、温度（`T`）と絶対湿度（`X`）から相対湿度（`Rh`）を計算します。

建築環境工学的な観点:
- **相対湿度の重要性**: 相対湿度は、
  空気中の水蒸気量を飽和状態に対する割合で示すため、
  快適性評価や結露の発生予測に不可欠な要素です。
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、絶対湿度、相対湿度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している相対湿度を推定します。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNRhtx(T, X float64) float64 {
	return FNRhtp(T, FNPwx(X))
}

// 乾燥空気の温度 t [C] と絶対湿度 x [kg/kg] から、湿り空気のエンタルピ h [J/kg] を求める。
// ここで、Tは乾燥空気の温度、Xは水蒸気の質量分率（乾燥空気に対する水蒸気の質量比）である。
// エンタルピーは、乾燥空気の比熱を用いた温度の項と、水蒸気の比熱及び蒸発熱を用いた温度と絶対湿度の項の和として計算される。
// See: パソコンによる空気調和計算法 P.29

/*
FNH (Function for Enthalpy of Moist Air)

この関数は、乾燥空気の温度（`T`）と絶対湿度（`X`）から、
湿り空気のエンタルピー（`h`）を計算します。
エンタルピーは、空気の持つ全熱量を示すため、
熱負荷計算や熱交換器の性能評価に不可欠な要素です。

建築環境工学的な観点:
- **エンタルピーの重要性**: エンタルピーは、
  空気の顕熱（温度に依存）と潜熱（水蒸気量に依存）の合計であり、
  空調システムにおける熱交換プロセスを評価する上で非常に重要です。
  - **熱負荷計算**: 冷暖房負荷計算において、
    空気のエンタルピー変化から熱量を算出します。
  - **熱交換器の性能評価**: 熱交換器の効率は、
    空気のエンタルピー変化に基づいて評価されます。
- **物理定数の利用**: `Ca`（乾き空気の定圧比熱）、
  `Cv`（水蒸気の低圧比熱）、
  `r0`（0℃の水の蒸発潜熱）といった物理定数を用いて、
  エンタルピーを正確に計算します。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNH(T, X float64) float64 {
	// 定数
	Ca := 1005.0    // 乾き空気の定格比熱, 1005 J/kgK (0.240 kcal/kgC)
	Cv := 1846.0    // 水蒸気の低圧比熱, 1846 J/kgK (0.441 kcal/kgC)
	r0 := 2501000.0 // 0℃の水の蒸発潜熱, 2501x10^3 J/kg (597.5 kcak/kg)

	// エンタルピー h
	h := Ca*T + (Cv*T+r0)*X

	return h
}

/*
FNXth (Function for Absolute Humidity from Temperature and Enthalpy)

この関数は、乾燥空気の温度（`T`）と湿り空気のエンタルピー（`h`）から、
絶対湿度（`X`）を計算します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、エンタルピー、絶対湿度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している絶対湿度を推定します。
- **潜熱負荷計算の基礎**: 絶対湿度は、
  空気中の水蒸気量を直接的に示すため、
  潜熱負荷計算や除湿量計算に不可欠な要素です。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNXth(T, h float64) float64 {
	// 定数
	Ca := 1005.0    // 乾き空気の定格比熱, 1005 J/kgK (0.240 kcal/kgC)
	Cv := 1846.0    // 水蒸気の低圧比熱, 1846 J/kgK (0.441 kcal/kgC)
	r0 := 2501000.0 // 0℃の水の蒸発潜熱, 2501x10^3 J/kg (597.5 kcak/kg)

	return (h - Ca*T) / (Cv*T + r0)
}

/*
FNWbtx (Function for Wet Bulb Temperature from Dry Bulb Temperature and Absolute Humidity)

この関数は、乾球温度（`T`）と絶対湿度（`X`）から湿球温度を計算します。
ニュートン法のような反復計算を用いて、収束するまで湿球温度を推定します。

建築環境工学的な観点:
- **湿り空気の状態値計算**: 湿り空気の状態は、
  乾球温度、絶対湿度、湿球温度など、複数のパラメータによって定義されます。
  この関数は、これらのパラメータ間の相互関係を計算し、
  不足している湿球温度を推定します。
- **反復計算の必要性**: 乾球温度と絶対湿度から湿球温度を直接求める解析解は複雑なため、
  数値的な反復計算（ニュートン法など）が用いられます。
  `for I := 1; I <= 10; I++` のループは、
  計算が収束するまで最大10回繰り返すことを示します。
- **湿球温度の重要性**: 湿球温度は、
  空気の冷却能力を示す指標であり、
  特に気化冷却器の性能評価や、
  空調システムの設計に用いられます。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNWbtx(T float64, X float64) float64 {
	var Tw0, H, Xs, Xss, F, Fd, Wbtx float64
	Tw0 = T
	H = FNH(T, X)
	for I := 1; I <= 10; I++ {
		Xs = FNXp(FNPws(Tw0))
		F = FNH(Tw0, Xs) - H - (Xs-X)*FNHc(Tw0)
		Xss = FNXp(FNPws(Tw0 + .1))
		Fd = (FNH(Tw0+.1, Xss) - H - (Xss-X)*FNHc(Tw0+.1) - F) / .1
		Wbtx = Tw0 - F/Fd
		if math.Abs(Wbtx-Tw0) <= .02 {
			return Wbtx
		}
		Tw0 = Wbtx
	}
	fmt.Printf("XXX FNWbtx  (Twb-Tw0)=%f\n", Wbtx-Tw0)
	return Wbtx
}

/*
FNHc (Function for Enthalpy of Water/Ice)

この関数は、湿球温度（`Twb`）に基づいて、
水または氷のエンタルピー（`Hc`）を計算します。
これは、湿り空気のエンタルピー計算や、
湿球温度計の原理をモデル化する際に用いられます。

建築環境工学的な観点:
- **湿球温度計の原理**: 湿球温度計は、
  水が蒸発する際の潜熱を利用して、
  空気の湿度を測定するものです。
  この関数は、湿球温度計の原理をモデル化し、
  湿り空気のエンタルピー計算に利用します。
- **水の相変化の考慮**: `Twb >= 0.0` の条件は、
  湿球温度が0℃以上の場合（水）と、
  0℃以下の場合（氷）で異なるエンタルピー計算を適用することを示唆します。
  `_Cw`は水の比熱、`_Rc`は氷の融解潜熱、`_Cc`は氷の比熱です。

この関数は、建物の温湿度環境を正確にモデル化し、
空調システムの設計、熱負荷計算、
および室内快適性評価を行うための基礎的な役割を果たします。
*/
func FNHc(Twb float64) float64 {
	var Hc float64 // declare and initialize Hc variable
	if Twb >= 0.0 {
		Hc = _Cw * Twb
	} else {
		Hc = -_Rc + _Cc*Twb
	}
	return Hc
}
